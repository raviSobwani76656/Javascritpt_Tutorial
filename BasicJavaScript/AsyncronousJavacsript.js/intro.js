/* =====================================================
   ðŸ“˜ SYNCHRONOUS vs ASYNCHRONOUS JAVASCRIPT
   =====================================================

ðŸ”¹ Synchronous JavaScript
- Executes line by line (sequentially).
- Each statement waits for the previous one to complete.
- Blocking in nature.

*/
console.log("Synchronous Example:");
console.log("Start");
for (let i = 0; i < 16; i++) {} // long blocking loop
console.log("End");

/* =====================================================
ðŸ”¹ Asynchronous JavaScript
- Code does not block execution.
- Tasks run in background (handled by Web APIs).
- Once finished, they are queued and executed later.
*/
console.log("\nAsynchronous Example:");
console.log("Start");

setTimeout(() => {
  console.log("Async Task Done");
}, 2000);

console.log("End");

/* =====================================================
ðŸ”¹ Key Components of Async JS
1. Call Stack  â†’ Runs code line by line.
2. Web APIs   â†’ Handle async operations (setTimeout, fetch, DOM events).
3. Task Queue â†’ Stores completed async callbacks.
4. Event Loop â†’ Pushes tasks from queue to stack when stack is free.

ðŸ‘‰ Together, they allow JS (which is single-threaded) to handle async tasks.
===================================================== */
